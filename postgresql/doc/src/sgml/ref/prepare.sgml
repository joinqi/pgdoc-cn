<!--
doc/src/sgml/ref/prepare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-PREPARE">
 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
  <!-- 
  <refpurpose>prepare a statement for execution</refpurpose> 
  -->
  <refpurpose>创建一个预备语句</refpurpose>
 </refnamediv>

 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>

 <indexterm zone="sql-prepare">
  <!-- 
  <primary>prepared statements</primary>
  <secondary>creating</secondary> 
  -->
  <primary>预备语句</primary>
  <secondary>创建</secondary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
PREPARE <replaceable class="PARAMETER">name</replaceable> [ ( <replaceable class="PARAMETER">data_type</replaceable> [, ...] ) ] AS <replaceable class="PARAMETER">statement</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>PREPARE</command> creates a prepared statement. A prepared
   statement is a server-side object that can be used to optimize
   performance. When the <command>PREPARE</command> statement is
   executed, the specified statement is parsed, analyzed, and rewritten.
   When an <command>EXECUTE</command> command is subsequently
   issued, the prepared statement is planned and executed.  This division
   of labor avoids repetitive parse analysis work, while allowing
   the execution plan to depend on the specific parameter values supplied.
  </para>
-->
<para>
<command>PREPARE</command>创建一个预备语句。一个预备语句是服务器端的对象，
可以用于优化性能。在执行<command>PREPARE</command>语句的时候，指定的查询被解析、分析、
重写。当随后发出<command>EXECUTE</command>语句的时候，预备语句被规划和执行。
这种分工避免了重复解析分析工作，允许执行计划依赖于所提供的特定的参数值。
</para>

  <!--
<para>
   Prepared statements can take parameters: values that are
   substituted into the statement when it is executed. When creating
   the prepared statement, refer to parameters by position, using
   <literal>$1</>, <literal>$2</>, etc. A corresponding list of
   parameter data types can optionally be specified. When a
   parameter's data type is not specified or is declared as
   <literal>unknown</literal>, the type is inferred from the context
   in which the parameter is used (if possible). When executing the
   statement, specify the actual values for these parameters in the
   <command>EXECUTE</command> statement.  Refer to <xref
   linkend="sql-execute"> for more
   information about that.
  </para>
-->
<para>
预备语句可以接受参数：在它执行的时候替换到查询中的数值。可以在一个预备语句里按照位置来引用参数，
比如<literal>$1</>, <literal>$2</>等。可以指定一个相应的参数数据类型列表。
如果一个参数的数据类型没有被指定或声明为<literal>unknown</literal>，
那么其类型将根据该参数所使用的实际上下文环境进行推测(如果有可能的话)。当执行该语句的时候，
将在<command>EXECUTE</command>语句中为这些参数指定实际值。参见<xref linkend="sql-execute">获取更多信息。
</para>

  <!--
<para>
   Prepared statements only last for the duration of the current
   database session. When the session ends, the prepared statement is
   forgotten, so it must be recreated before being used again. This
   also means that a single  prepared statement cannot be used by
   multiple simultaneous database clients; however, each client can create
   their own prepared statement to use.  Prepared statements can be
   manually cleaned up using the <xref linkend="sql-deallocate"> command.
  </para>
-->
<para>
预备语句只是在当前数据库会话的过程中存在。如果客户端退出，那么预备语句就会被遗忘，
因此必须在被重新使用之前重新创建。这也意味着一个预备语句不能被多个数据库客户端同时使用；
但是，每个客户端可以创建它们自己的预备语句来使用。预备语句可以用
<xref linkend="sql-deallocate">命令手工清除。
</para>

  <!--
<para>
   Prepared statements have the largest performance advantage when a
   single session is being used to execute a large number of similar
   statements. The performance difference will be particularly
   significant if the statements are complex to plan or rewrite, for
   example, if the query involves a join of many tables or requires
   the application of several rules. If the statement is relatively simple
   to plan and rewrite but relatively expensive to execute, the
   performance advantage of prepared statements will be less noticeable.
  </para>
-->
<para>
如果一个会话准备用于执行大量类似的查询，那么预备语句可以获得最大限度的性能优势。
如果查询非常复杂，需要复杂的规划或者重写，那么性能差距将更加明显。比如，
如果查询涉及许多表的连接，或者有多种规则要求应用。如果查询的规划和重写相对简单，
而执行起来开销相当大，那么预备语句的性能优势就不那么明显。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <!--
<para>
      An arbitrary name given to this particular prepared
      statement. It must be unique within a single session and is
      subsequently used to execute or deallocate a previously prepared
      statement.
     </para>
-->
<para>
给予这个特定的预备语句任意名字。它必须在一个会话中是唯一的，
并且用于执行或者删除一个预备语句。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <!--
<para>
      The data type of a parameter to the prepared statement.  If the
      data type of a particular parameter is unspecified or is
      specified as <literal>unknown</literal>, it will be inferred
      from the context in which the parameter is used. To refer to the
      parameters in the prepared statement itself, use
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
-->
<para>
预备语句的某个参数的数据类型。如果某个参数的数据类型未指定或指定为<literal>unknown</literal>，
那么将根据该参数使用的上下文环境进行推断。可以使用<literal>$1</literal>, <literal>$2</literal>
等等在预备语句内部引用这个参数。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">statement</replaceable></term>
    <listitem>
     <!--
<para>
      Any <command>SELECT</>, <command>INSERT</>, <command>UPDATE</>,
      <command>DELETE</>, or <command>VALUES</> statement.
     </para>
-->
<para>
<command>SELECT</>, <command>INSERT</>, <command>UPDATE</>, <command>DELETE</>,
或 <command>VALUES</> 语句之一。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   If a prepared statement is executed enough times, the server may eventually
   decide to save and re-use a generic plan rather than re-planning each time.
   This will occur immediately if the prepared statement has no parameters;
   otherwise it occurs only if the generic plan appears to be not much more
   expensive than a plan that depends on specific parameter values.
   Typically, a generic plan will be selected only if the query's performance
   is estimated to be fairly insensitive to the specific parameter values
   supplied.
  </para>
-->
<para>
如果预备语句执行了足够长的时间，服务器可能最终决定保存并重新使用一个一般的计划，
而不是每次重新计划。如果预备语句没有参数，那么将立即发生；
否则只在一般计划看起来不比依赖于特定参数值的计划昂贵时发生。
典型的，只有查询的性能对提供的特定的参数值相当迟钝时选择一般的计划。
</para>

  <!--
<para>
   To examine the query plan <productname>PostgreSQL</productname> is using
   for a prepared statement, use <xref linkend="sql-explain">.
   If a generic plan is in use, it will contain parameter symbols
   <literal>$<replaceable>n</></literal>, while a custom plan will have the
   current actual parameter values substituted into it.
  </para>
-->
<para>
为了查询<productname>PostgreSQL</productname>用于预备语句的查询计划，使用<xref linkend="sql-explain">。
如果正在使用一个一般的计划，它将包含参数符号<literal>$<replaceable>n</></literal>，
此时定制计划将有代入的当前实际参数的值。
</para>

  <!--
<para>
   For more information on query planning and the statistics collected
   by <productname>PostgreSQL</productname> for that purpose, see
   the <xref linkend="sql-analyze">
   documentation.
  </para>
-->
<para>
有关查询规划和<productname>PostgreSQL</productname>为查询优化的目的收集统计的更多信息，
参阅<xref linkend="sql-analyze">文档。
</para>

  <!--
<para>
   Although the main point of a prepared statement is to avoid repeated parse
   analysis and planning of the statement, <productname>PostgreSQL</> will
   force re-analysis and re-planning of the statement before using it
   whenever database objects used in the statement have undergone
   definitional (DDL) changes since the previous use of the prepared
   statement.  Also, if the value of <xref linkend="guc-search-path"> changes
   from one use to the next, the statement will be re-parsed using the new
   <varname>search_path</>.  (This latter behavior is new as of
   <productname>PostgreSQL</productname> 9.3.)  These rules make use of a
   prepared statement semantically almost equivalent to re-submitting the
   same query text over and over, but with a performance benefit if no object
   definitions are changed, especially if the best plan remains the same
   across uses.  An example of a case where the semantic equivalence is not
   perfect is that if the statement refers to a table by an unqualified name,
   and then a new table of the same name is created in a schema appearing
   earlier in the <varname>search_path</>, no automatic re-parse will occur
   since no object used in the statement changed.  However, if some other
   change forces a re-parse, the new table will be referenced in subsequent
   uses.
  </para>
-->
<para>
尽管预备语句的重点是避免重复分析和规划语句，但<productname>PostgreSQL</>
在使用它之前强制重复分析和重复计划语句，
每当在语句中使用的数据库对象自前一次使用预备语句后经历了明确(DDL)的变化时。
还有，如果<xref linkend="guc-search-path">的值在到下一个使用时改变了，
那么语句将使用新的<varname>search_path</>重新分析。（后面的行为是
<productname>PostgreSQL</productname> 9.3新增的。）
使用预备语句语义的规则几乎等于反复重新提交相同的查询文本，
但是如果没有对象定义改变那么将有一个性能优势，尤其是保持使用最佳的规划。
语义等价不完美的一个例子是如果语句引用一个未经限定名字的表，
然后在一个模式中创建了一个相同名字的表出现在<varname>search_path</>中靠前的地方，
那么将不会自动重复分析，因为用于语句的对象没有改变。但是，如果其他改变强制了一个重复分析，
那么新表将在后来的使用中引用。
</para>

  <!--
<para>
   You can see all prepared statements available in the session by querying the
   <link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
   system view.
  </para>
-->
<para>
可以通过查询<link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
系统视图获得某个会话中所有可用的预备语句。
</para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
  <title id="sql-prepare-examples-title">Examples</title>
  <!--
<para>
   Create a prepared statement for an <command>INSERT</command>
   statement, and then execute it:
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>
-->
<para>
为一个<command>INSERT</command>语句创建一个预备语句然后执行它：
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
</para>

  <!--
<para>
   Create a prepared statement for a <command>SELECT</command>
   statement, and then execute it:
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   Note that the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</> is used.
  </para>
-->
<para>
为一个<command>SELECT</command>语句创建一个预备语句然后执行它：
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>
注意，第二个参数的数据类型并未指定。所以将从上下文环境推测<literal>$2</>的类型。
</para>
 </refsect1>
 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The SQL standard includes a <command>PREPARE</command> statement,
   but it is only for use in embedded SQL. This version of the
   <command>PREPARE</command> statement also uses a somewhat different
   syntax.
  </para>
-->
<para>
SQL 标准包含一个<command>PREPARE</command>语句，但是它只用于嵌入式 SQL 。
PostgreSQL 实现的<command>PREPARE</command>语句的语法也略有不同。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"></member>
   <member><xref linkend="sql-execute"></member>
  </simplelist>
 </refsect1>
</refentry>
